{
  "version": 3,
  "sources": ["../../../src/app.js", "../../../../node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts", "../bundle-XWOxMf/middleware-insertion-facade.js", "../../../../node_modules/wrangler/templates/middleware/common.ts", "../bundle-XWOxMf/middleware-loader.entry.ts"],
  "sourceRoot": "/Users/pedropinto/sfmc-contract-health/.wrangler/tmp/dev-bedf4v",
  "sourcesContent": ["export default {\n  async fetch(request, env, ctx) {\n    const url = new URL(request.url);\n    const path = url.pathname;\n\n    // Health check\n    if (path === \"/\") {\n      return Response.json({\n        message: \"\u2705 SFMC Contract Health API is running!\",\n      });\n    }\n\n    // Lista de tenants\n    if (path === \"/api/tenants\") {\n      const { results } = await env.DB.prepare(\n        `SELECT id, name, sfmc_subdomain FROM tenants`\n      ).all();\n      return Response.json(results);\n    }\n\n    // Atualiza limites contratuais via PUT\n    if (path === \"/api/limits\" && request.method === \"PUT\") {\n      const body = await request.json();\n      await env.DB.prepare(\n        `UPDATE org_limits SET\n          all_contacts_limit = ?,\n          email_push_limit = ?,\n          sms_limit = ?,\n          whatsapp_limit = ?,\n          cloudpages_limit = ?\n         WHERE tenant_id = ?`\n      )\n        .bind(\n          body.AllContacts,\n          body.Email,\n          body.SMS,\n          body.WhatsApp,\n          body.CloudPages,\n          1\n        )\n        .run();\n      return Response.json({ success: true });\n    }\n\n    // Consulta limites + uso atual\n    if (path === \"/api/limits\") {\n      const { results } = await env.DB.prepare(\n        `SELECT * FROM org_limits WHERE tenant_id = ?`\n      )\n        .bind(1)\n        .all();\n\n      const limitsRaw = results[0] || {};\n      const limits = {\n        AllContacts: Number(limitsRaw.all_contacts_limit) || 0,\n        Email: Number(limitsRaw.email_push_limit) || 0,\n        SMS: Number(limitsRaw.sms_limit) || 0,\n        WhatsApp: Number(limitsRaw.whatsapp_limit) || 0,\n        CloudPages: Number(limitsRaw.cloudpages_limit) || 0,\n      };\n\n      // Busca o registro mais recente de uso\n      const { results: usageRows } = await env.DB.prepare(\n        `SELECT \n          all_contacts as AllContacts,\n          email_push_sent as Email,\n          sms_sent as SMS,\n          whatsapp_sent as WhatsApp,\n          cloudpages_prints as CloudPages\n         FROM daily_usage WHERE tenant_id = ? ORDER BY date DESC LIMIT 1`\n      )\n        .bind(1)\n        .all();\n\n      const usageRaw = usageRows[0] || {};\n      const usage = {\n        AllContacts: Number(usageRaw.AllContacts) || 0,\n        Email: Number(usageRaw.Email) || 0,\n        SMS: Number(usageRaw.SMS) || 0,\n        WhatsApp: Number(usageRaw.WhatsApp) || 0,\n        CloudPages: Number(usageRaw.CloudPages) || 0,\n      };\n\n      return Response.json({ limits, usage });\n    }\n\n    // Hist\u00F3rico de uso para gr\u00E1fico de evolu\u00E7\u00E3o\n    if (path === \"/api/usage\") {\n      const { results } = await env.DB.prepare(\n        `SELECT * FROM daily_usage WHERE tenant_id = ? ORDER BY date ASC LIMIT 30`\n      )\n        .bind(1)\n        .all();\n      return Response.json({ usage: results });\n    }\n\n    return new Response(\"\u274C Not found\", { status: 404 });\n  },\n};\n", "import type { Middleware } from \"./common\";\n\nconst drainBody: Middleware = async (request, env, _ctx, middlewareCtx) => {\n\ttry {\n\t\treturn await middlewareCtx.next(request, env);\n\t} finally {\n\t\ttry {\n\t\t\tif (request.body !== null && !request.bodyUsed) {\n\t\t\t\tconst reader = request.body.getReader();\n\t\t\t\twhile (!(await reader.read()).done) {}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error(\"Failed to drain the unused request body.\", e);\n\t\t}\n\t}\n};\n\nexport default drainBody;\n", "\t\t\t\timport worker, * as OTHER_EXPORTS from \"/Users/pedropinto/sfmc-contract-health/src/app.js\";\n\t\t\t\timport * as __MIDDLEWARE_0__ from \"/Users/pedropinto/node_modules/wrangler/templates/middleware/middleware-ensure-req-body-drained.ts\";\n\n\t\t\t\texport * from \"/Users/pedropinto/sfmc-contract-health/src/app.js\";\n\t\t\t\tconst MIDDLEWARE_TEST_INJECT = \"__INJECT_FOR_TESTING_WRANGLER_MIDDLEWARE__\";\n\t\t\t\texport const __INTERNAL_WRANGLER_MIDDLEWARE__ = [\n\t\t\t\t\t\n\t\t\t\t\t__MIDDLEWARE_0__.default\n\t\t\t\t]\n\t\t\t\texport default worker;", "export type Awaitable<T> = T | Promise<T>;\n// TODO: allow dispatching more events?\nexport type Dispatcher = (\n\ttype: \"scheduled\",\n\tinit: { cron?: string }\n) => Awaitable<void>;\n\nexport type IncomingRequest = Request<\n\tunknown,\n\tIncomingRequestCfProperties<unknown>\n>;\n\nexport interface MiddlewareContext {\n\tdispatch: Dispatcher;\n\tnext(request: IncomingRequest, env: any): Awaitable<Response>;\n}\n\nexport type Middleware = (\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tmiddlewareCtx: MiddlewareContext\n) => Awaitable<Response>;\n\nconst __facade_middleware__: Middleware[] = [];\n\n// The register functions allow for the insertion of one or many middleware,\n// We register internal middleware first in the stack, but have no way of controlling\n// the order that addMiddleware is run in service workers so need an internal function.\nexport function __facade_register__(...args: (Middleware | Middleware[])[]) {\n\t__facade_middleware__.push(...args.flat());\n}\nexport function __facade_registerInternal__(\n\t...args: (Middleware | Middleware[])[]\n) {\n\t__facade_middleware__.unshift(...args.flat());\n}\n\nfunction __facade_invokeChain__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tmiddlewareChain: Middleware[]\n): Awaitable<Response> {\n\tconst [head, ...tail] = middlewareChain;\n\tconst middlewareCtx: MiddlewareContext = {\n\t\tdispatch,\n\t\tnext(newRequest, newEnv) {\n\t\t\treturn __facade_invokeChain__(newRequest, newEnv, ctx, dispatch, tail);\n\t\t},\n\t};\n\treturn head(request, env, ctx, middlewareCtx);\n}\n\nexport function __facade_invoke__(\n\trequest: IncomingRequest,\n\tenv: any,\n\tctx: ExecutionContext,\n\tdispatch: Dispatcher,\n\tfinalMiddleware: Middleware\n): Awaitable<Response> {\n\treturn __facade_invokeChain__(request, env, ctx, dispatch, [\n\t\t...__facade_middleware__,\n\t\tfinalMiddleware,\n\t]);\n}\n", "// This loads all middlewares exposed on the middleware object and then starts\n// the invocation chain. The big idea is that we can add these to the middleware\n// export dynamically through wrangler, or we can potentially let users directly\n// add them as a sort of \"plugin\" system.\n\nimport ENTRY, { __INTERNAL_WRANGLER_MIDDLEWARE__ } from \"/Users/pedropinto/sfmc-contract-health/.wrangler/tmp/bundle-XWOxMf/middleware-insertion-facade.js\";\nimport { __facade_invoke__, __facade_register__, Dispatcher } from \"/Users/pedropinto/node_modules/wrangler/templates/middleware/common.ts\";\nimport type { WorkerEntrypointConstructor } from \"/Users/pedropinto/sfmc-contract-health/.wrangler/tmp/bundle-XWOxMf/middleware-insertion-facade.js\";\n\n// Preserve all the exports from the worker\nexport * from \"/Users/pedropinto/sfmc-contract-health/.wrangler/tmp/bundle-XWOxMf/middleware-insertion-facade.js\";\n\nclass __Facade_ScheduledController__ implements ScheduledController {\n\treadonly #noRetry: ScheduledController[\"noRetry\"];\n\n\tconstructor(\n\t\treadonly scheduledTime: number,\n\t\treadonly cron: string,\n\t\tnoRetry: ScheduledController[\"noRetry\"]\n\t) {\n\t\tthis.#noRetry = noRetry;\n\t}\n\n\tnoRetry() {\n\t\tif (!(this instanceof __Facade_ScheduledController__)) {\n\t\t\tthrow new TypeError(\"Illegal invocation\");\n\t\t}\n\t\t// Need to call native method immediately in case uncaught error thrown\n\t\tthis.#noRetry();\n\t}\n}\n\nfunction wrapExportedHandler(worker: ExportedHandler): ExportedHandler {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn worker;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\tconst fetchDispatcher: ExportedHandlerFetchHandler = function (\n\t\trequest,\n\t\tenv,\n\t\tctx\n\t) {\n\t\tif (worker.fetch === undefined) {\n\t\t\tthrow new Error(\"Handler does not export a fetch() function.\");\n\t\t}\n\t\treturn worker.fetch(request, env, ctx);\n\t};\n\n\treturn {\n\t\t...worker,\n\t\tfetch(request, env, ctx) {\n\t\t\tconst dispatcher: Dispatcher = function (type, init) {\n\t\t\t\tif (type === \"scheduled\" && worker.scheduled !== undefined) {\n\t\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\t\tDate.now(),\n\t\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t\t() => {}\n\t\t\t\t\t);\n\t\t\t\t\treturn worker.scheduled(controller, env, ctx);\n\t\t\t\t}\n\t\t\t};\n\t\t\treturn __facade_invoke__(request, env, ctx, dispatcher, fetchDispatcher);\n\t\t},\n\t};\n}\n\nfunction wrapWorkerEntrypoint(\n\tklass: WorkerEntrypointConstructor\n): WorkerEntrypointConstructor {\n\t// If we don't have any middleware defined, just return the handler as is\n\tif (\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__ === undefined ||\n\t\t__INTERNAL_WRANGLER_MIDDLEWARE__.length === 0\n\t) {\n\t\treturn klass;\n\t}\n\t// Otherwise, register all middleware once\n\tfor (const middleware of __INTERNAL_WRANGLER_MIDDLEWARE__) {\n\t\t__facade_register__(middleware);\n\t}\n\n\t// `extend`ing `klass` here so other RPC methods remain callable\n\treturn class extends klass {\n\t\t#fetchDispatcher: ExportedHandlerFetchHandler<Record<string, unknown>> = (\n\t\t\trequest,\n\t\t\tenv,\n\t\t\tctx\n\t\t) => {\n\t\t\tthis.env = env;\n\t\t\tthis.ctx = ctx;\n\t\t\tif (super.fetch === undefined) {\n\t\t\t\tthrow new Error(\"Entrypoint class does not define a fetch() function.\");\n\t\t\t}\n\t\t\treturn super.fetch(request);\n\t\t};\n\n\t\t#dispatcher: Dispatcher = (type, init) => {\n\t\t\tif (type === \"scheduled\" && super.scheduled !== undefined) {\n\t\t\t\tconst controller = new __Facade_ScheduledController__(\n\t\t\t\t\tDate.now(),\n\t\t\t\t\tinit.cron ?? \"\",\n\t\t\t\t\t() => {}\n\t\t\t\t);\n\t\t\t\treturn super.scheduled(controller);\n\t\t\t}\n\t\t};\n\n\t\tfetch(request: Request<unknown, IncomingRequestCfProperties>) {\n\t\t\treturn __facade_invoke__(\n\t\t\t\trequest,\n\t\t\t\tthis.env,\n\t\t\t\tthis.ctx,\n\t\t\t\tthis.#dispatcher,\n\t\t\t\tthis.#fetchDispatcher\n\t\t\t);\n\t\t}\n\t};\n}\n\nlet WRAPPED_ENTRY: ExportedHandler | WorkerEntrypointConstructor | undefined;\nif (typeof ENTRY === \"object\") {\n\tWRAPPED_ENTRY = wrapExportedHandler(ENTRY);\n} else if (typeof ENTRY === \"function\") {\n\tWRAPPED_ENTRY = wrapWorkerEntrypoint(ENTRY);\n}\nexport default WRAPPED_ENTRY;\n"],
  "mappings": "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",
  "names": []
}
